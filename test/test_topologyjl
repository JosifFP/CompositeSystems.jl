using PRATS
import PRATS.PRATSBase
import PRATS.CompositeAdequacy: CompositeAdequacy, field, var,
assetgrouplist, findfirstunique, 
build_sol_values, optimizer_with_attributes
import PowerModels, Ipopt, Juniper, BenchmarkTools, JuMP,HiGHS
import Missings
using Test
using ProfileView, Profile
import BenchmarkTools: @btime
RawFile = "test/data/RBTS.m"
PRATSBase.silence()
#@code_warntype

nl_solver = optimizer_with_attributes(
    Ipopt.Optimizer, "tol"=>1e-3, "acceptable_tol"=>1e-2, "max_cpu_time"=>1e+2,
    "constr_viol_tol"=>0.01, "acceptable_tol"=>0.1, "print_level"=>0, "threads"=>1)
optimizer = optimizer_with_attributes(Juniper.Optimizer, "nl_solver"=>nl_solver, "atol"=>1e-2, "log_levels"=>[], "threads"=>1)

system = PRATSBase.SystemModel(RawFile)
systemstates = CompositeAdequacy.SystemStates(system, method)
field(system, :loads, :cost)[:] = [9632.5; 4376.9; 8026.7; 8632.3; 5513.2]
method = PRATS.SequentialMCS(samples=1, seed=321, threaded=false)
pm = CompositeAdequacy.PowerFlowProblem(system, method, settings)
t=1


field(systemstates, :generators)[3,t] = 0
field(systemstates, :generators)[7,t] = 0
field(systemstates, :generators)[8,t] = 0
field(systemstates, :generators)[9,t] = 0
field(systemstates, :branches)[1,t] = 0
systemstates.system[t] = 0
CompositeAdequacy.update!(pm, systemstates, system, t)
CompositeAdequacy.solve!(pm, system, t)




@testset "test Topology" begin
    RawFile = "test/data/RBTS.m"

    system = PRATSBase.SystemModel(RawFile)
    field(system, :loads, :cost)[:] = [9632.5; 4376.9; 8026.7; 8632.3; 5513.2]
    method = PRATS.SequentialMCS(samples=1, seed=321, threaded=true)
    pm = CompositeAdequacy.PowerFlowProblem(system, method, settings)
    t=1

    i_buses_idxs = deepcopy(pm.topology.buses_idxs)
    i_loads_idxs = deepcopy(pm.topology.loads_idxs)
    i_branches_idxs = deepcopy(pm.topology.branches_idxs)
    i_shunts_idxs = deepcopy(pm.topology.shunts_idxs)
    i_generators_idxs = deepcopy(pm.topology.generators_idxs)
    i_storages_idxs = deepcopy(pm.topology.storages_idxs)
    i_generatorstorages_idxs = deepcopy(pm.topology.generatorstorages_idxs)
    i_bus_shunts = deepcopy(pm.topology.shunts_nodes)
    i_bus_generators = deepcopy(pm.topology.generators_nodes)
    i_bus_storages = deepcopy(pm.topology.storages_nodes)
    i_bus_generatorstorages = deepcopy(pm.topology.generatorstorages_nodes)
    i_plc = deepcopy(pm.topology.plc)

    systemstates = CompositeAdequacy.SystemStates(system, method)
    field(systemstates, :branches)[3,t] = 0
    field(systemstates, :branches)[4,t] = 0
    field(systemstates, :branches)[8,t] = 0
    field(systemstates, :generators)[3,t] = 0
    field(systemstates, :generators)[7,t] = 0
    field(systemstates, :generators)[8,t] = 0
    field(systemstates, :generators)[11,t] = 0
    systemstates.system[t] = 0
    CompositeAdequacy.update!(pm, systemstates, system, t)

    t=1
    systemstates = CompositeAdequacy.SystemStates(system, method)
    CompositeAdequacy.update!(pm, systemstates, system, t)
    f_topology_system = CompositeAdequacy.Topology(system)
    f_topology_pm = deepcopy(pm.topology)

    f_buses_idxs = pm.topology.buses_idxs
    f_loads_idxs = pm.topology.loads_idxs
    f_branches_idxs = pm.topology.branches_idxs
    f_shunts_idxs = pm.topology.shunts_idxs
    f_generators_idxs = pm.topology.generators_idxs
    f_storages_idxs = pm.topology.storages_idxs
    f_generatorstorages_idxs = pm.topology.generatorstorages_idxs
    f_bus_shunts = pm.topology.shunts_nodes
    f_bus_generators = pm.topology.generators_nodes
    f_bus_storages = pm.topology.storages_nodes
    f_bus_generatorstorages = pm.topology.generatorstorages_nodes
    f_plc = pm.topology.plc

    @test i_buses_idxs == f_buses_idxs
    @test i_loads_idxs == f_loads_idxs
    @test i_branches_idxs == f_branches_idxs
    @test i_generators_idxs == f_generators_idxs
    @test i_storages_idxs == f_storages_idxs
    @test i_generatorstorages_idxs == f_generatorstorages_idxs
    @test i_bus_shunts == f_bus_shunts
    @test i_bus_generators == f_bus_generators
    @test i_bus_storages == f_bus_storages
    @test i_bus_generatorstorages == f_bus_generatorstorages
    @test i_plc == f_plc
    #@test i_topology_system == f_topology_system
    #@test i_topology_system == f_topology_pm
end
